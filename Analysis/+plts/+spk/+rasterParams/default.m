function [eventTimes, trialGroups, opt] = default(ev)
if ~exist('customTag', 'var'); customTag = 'default'; end

switch lower(customTag)
    case 'default'
        %%
        opt = struct;
        choiceLabels = (ev.response_direction*2-3).*(ev.response_direction>0);
        choiceNames = {'MoveL'; 'Timeout'; 'MoveR'}; 

        trialLabels = ...
            +1*ev.is_blankTrial ...
            +2*ev.is_auditoryTrial...
            +3*ev.is_visualTrial...
            +4*ev.is_coherentTrial ...
            +5*ev.is_conflictTrial;
        trialNames = {'Blank'; 'Aud'; 'Vis'; 'Coherent'; 'Conflict'}; 
        
        eventTimes = {...
            ev.timeline_visPeriodOnOff(:,1); ...
            ev.timeline_audPeriodOnOff(:,1); ...
            ev.timeline_choiceMoveOn; ...
            };

        opt.eventNames = {...
            'Vis Onset'; ...
            'Aud Onset'; ...
            'Movement Onset'; ...
            };

        trialGroups = {...
            [sign(ev.stim_visAzimuth), choiceLabels, trialLabels]; ...
            [sign(ev.stim_audAzimuth), choiceLabels, trialLabels]; ...
            [choiceLabels, trialLabels]; ...
            };

        opt.groupNames = {...
            {'Vis Azimuth', 'Choice', 'Trial type'}; ...
            {'Aud Azimuth', 'Choice', 'Trial type'}; ...
            {'Choice', 'Trial type'}; ...
            };

        
        %         opt.groupNames = {...
%             {{'visL'; 'visR'}, choiceNames, trialNames} ...
%             {{'audL'; 'aud0'; 'audR'}, choiceNames, trialNames} ...
%             {choiceNames, trialNames} ...
%             };


        opt.sortClusters = 'sig';
        opt.sortTrials = repmat({ev.timeline_choiceMoveOn}, length(eventTimes),1);
        opt.trialTickTimes = repmat({ev.timeline_choiceMoveOn}, length(eventTimes),1);
        
    
end
end
